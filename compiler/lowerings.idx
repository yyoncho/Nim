nimTitle	lowerings	lowerings.html	module lowerings		0
nim	genPrefix	lowerings.html#genPrefix	const genPrefix		13
nim	newDeref	lowerings.html#newDeref,PNode	proc newDeref(n: PNode): PNode		21
nim	newTupleAccess	lowerings.html#newTupleAccess,ModuleGraph,PNode,int	proc newTupleAccess(g: ModuleGraph; tup: PNode; i: int): PNode		25
nim	addVar	lowerings.html#addVar,PNode,PNode	proc addVar(father, v: PNode)		41
nim	addVar	lowerings.html#addVar,PNode,PNode,PNode	proc addVar(father, v, value: PNode)		48
nim	newAsgnStmt	lowerings.html#newAsgnStmt,PNode,PNode	proc newAsgnStmt(le, ri: PNode): PNode		55
nim	newFastAsgnStmt	lowerings.html#newFastAsgnStmt,PNode,PNode	proc newFastAsgnStmt(le, ri: PNode): PNode		60
nim	newFastMoveStmt	lowerings.html#newFastMoveStmt,ModuleGraph,PNode,PNode	proc newFastMoveStmt(g: ModuleGraph; le, ri: PNode): PNode		65
nim	lowerTupleUnpacking	lowerings.html#lowerTupleUnpacking,ModuleGraph,PNode,IdGenerator,PSym	proc lowerTupleUnpacking(g: ModuleGraph; n: PNode; idgen: IdGenerator; owner: PSym): PNode		81
nim	evalOnce	lowerings.html#evalOnce,ModuleGraph,PNode,IdGenerator,PSym	proc evalOnce(g: ModuleGraph; value: PNode; idgen: IdGenerator; owner: PSym): PNode		107
nim	newTupleAccessRaw	lowerings.html#newTupleAccessRaw,PNode,int	proc newTupleAccessRaw(tup: PNode; i: int): PNode		124
nim	newTryFinally	lowerings.html#newTryFinally,PNode,PNode	proc newTryFinally(body, final: PNode): PNode		131
nim	lowerTupleUnpackingForAsgn	lowerings.html#lowerTupleUnpackingForAsgn,ModuleGraph,PNode,IdGenerator,PSym	proc lowerTupleUnpackingForAsgn(g: ModuleGraph; n: PNode; idgen: IdGenerator;\n                           owner: PSym): PNode		134
nim	lowerSwap	lowerings.html#lowerSwap,ModuleGraph,PNode,IdGenerator,PSym	proc lowerSwap(g: ModuleGraph; n: PNode; idgen: IdGenerator; owner: PSym): PNode		153
nim	createObj	lowerings.html#createObj,ModuleGraph,IdGenerator,PSym,TLineInfo	proc createObj(g: ModuleGraph; idgen: IdGenerator; owner: PSym; info: TLineInfo;\n          final = true): PType		174
nim	rawAddField	lowerings.html#rawAddField,PType,PSym	proc rawAddField(obj: PType; field: PSym)		194
nim	rawIndirectAccess	lowerings.html#rawIndirectAccess,PNode,PSym,TLineInfo	proc rawIndirectAccess(a: PNode; field: PSym; info: TLineInfo): PNode		201
nim	rawDirectAccess	lowerings.html#rawDirectAccess,PSym,PSym	proc rawDirectAccess(obj, field: PSym): PNode		212
nim	addField	lowerings.html#addField,PType,PSym,IdentCache,IdGenerator	proc addField(obj: PType; s: PSym; cache: IdentCache; idgen: IdGenerator): PSym		241
nim	addUniqueField	lowerings.html#addUniqueField,PType,PSym,IdentCache,IdGenerator	proc addUniqueField(obj: PType; s: PSym; cache: IdentCache; idgen: IdGenerator): PSym		258
nim	newDotExpr	lowerings.html#newDotExpr,PSym,PSym	proc newDotExpr(obj, b: PSym): PNode		272
nim	indirectAccess	lowerings.html#indirectAccess,PNode,ItemId,TLineInfo	proc indirectAccess(a: PNode; b: ItemId; info: TLineInfo): PNode		280
nim	indirectAccess	lowerings.html#indirectAccess,PNode,string,TLineInfo,IdentCache	proc indirectAccess(a: PNode; b: string; info: TLineInfo; cache: IdentCache): PNode		303
nim	getFieldFromObj	lowerings.html#getFieldFromObj,PType,PSym	proc getFieldFromObj(t: PType; v: PSym): PSym		327
nim	indirectAccess	lowerings.html#indirectAccess,PNode,PSym,TLineInfo	proc indirectAccess(a: PNode; b: PSym; info: TLineInfo): PNode		338
nim	indirectAccess	lowerings.html#indirectAccess,PSym,PSym,TLineInfo	proc indirectAccess(a, b: PSym; info: TLineInfo): PNode		342
nim	genAddrOf	lowerings.html#genAddrOf,PNode,IdGenerator	proc genAddrOf(n: PNode; idgen: IdGenerator; typeKind = tyPtr): PNode		345
nim	genDeref	lowerings.html#genDeref,PNode	proc genDeref(n: PNode; k = nkHiddenDeref): PNode		351
nim	callCodegenProc	lowerings.html#callCodegenProc,ModuleGraph,string,TLineInfo,PNode,PNode,PNode,PNode	proc callCodegenProc(g: ModuleGraph; name: string; info: TLineInfo = unknownLineInfo;\n                arg1: PNode = nil; arg2: PNode = nil; arg3: PNode = nil;\n                optionalArgs: PNode = nil): PNode		356
nim	newIntLit	lowerings.html#newIntLit,ModuleGraph,TLineInfo,BiggestInt	proc newIntLit(g: ModuleGraph; info: TLineInfo; value: BiggestInt): PNode		374
nim	genHigh	lowerings.html#genHigh,ModuleGraph,PNode	proc genHigh(g: ModuleGraph; n: PNode): PNode		378
nim	genLen	lowerings.html#genLen,ModuleGraph,PNode	proc genLen(g: ModuleGraph; n: PNode): PNode		387
nimgrp	addvar	lowerings.html#addVar-procs-all	proc		41
nimgrp	indirectaccess	lowerings.html#indirectAccess-procs-all	proc		280
